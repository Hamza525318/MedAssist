"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { FileText, ClipboardList, BarChart2, Upload, X, Filter, ChevronLeft, ChevronRight } from 'lucide-react';
import { PatientData } from '@/types';
import { reportApi, LabReportData, ReportFilter } from '@/utils/api/report';

interface PatientHistoryItem {
  id: string;
  date: string;
  note: string;
  department: string;
  addedBy: string;
}

interface PatientLabReport {
  id: string;
  name: string;
  date: string;
  type: string;
  fileUrl: string;
}

interface PatientDetailsTabsProps {
  patient: PatientData;
  onRefresh?: () => Promise<void>;
}

interface UploadReportModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (reportType: string, reportName: string, file: File) => Promise<void>;
  isLoading: boolean;
}

const COMMON_REPORT_TYPES = [
  'Blood Test',
  'X-Ray',
  'CT Scan',
  'MRI',
  'Ultrasound',
  'ECG',
  'EEG',
  'Pathology',
  'Other'
];

const UploadReportModal: React.FC<UploadReportModalProps> = ({
  isOpen,
  onClose,
  onUpload,
  isLoading
}) => {
  const [reportType, setReportType] = useState('');
  const [reportName, setReportName] = useState('');
  const [file, setFile] = useState<File | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [customType, setCustomType] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    
    if (!reportType) {
      setError('Please select or enter a report type');
      return;
    }
    
    if (!reportName) {
      setError('Please enter a report name');
      return;
    }
    
    if (!file) {
      setError('Please select a file to upload');
      return;
    }
    
    try {
      await onUpload(reportType, reportName, file);
      // Reset form after successful upload
      setReportType('');
      setReportName('');
      setFile(null);
      setCustomType(false);
      onClose();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to upload report');
    }
  };
  
  const handleTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (value === 'other') {
      setCustomType(true);
      setReportType('');
    } else {
      setCustomType(false);
      setReportType(value);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Upload Lab Report</h2>
          <button 
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700"
            disabled={isLoading}
          >
            <X size={20} />
          </button>
        </div>
        
        {error && (
          <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md text-sm">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Report Type
            </label>
            {!customType ? (
              <select
                value={reportType}
                onChange={handleTypeChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent"
                disabled={isLoading}
                required
              >
                <option value="">Select report type</option>
                {COMMON_REPORT_TYPES.map((type) => (
                  <option key={type} value={type === 'Other' ? 'other' : type}>
                    {type}
                  </option>
                ))}
              </select>
            ) : (
              <input
                type="text"
                value={reportType}
                onChange={(e) => setReportType(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent"
                placeholder="Enter custom report type"
                disabled={isLoading}
                required
              />
            )}
            {customType && (
              <button
                type="button"
                onClick={() => setCustomType(false)}
                className="text-sm text-teal-600 mt-1 hover:underline"
              >
                Back to common types
              </button>
            )}
          </div>
          
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Report Name
            </label>
            <input
              type="text"
              value={reportName}
              onChange={(e) => setReportName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              placeholder="e.g., Annual Blood Work, Chest X-Ray"
              disabled={isLoading}
              required
            />
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Report File
            </label>
            <input
              type="file"
              onChange={(e) => setFile(e.target.files?.[0] || null)}
              className="block w-full text-sm text-gray-500
                file:mr-4 file:py-2 file:px-4
                file:rounded-full file:border-0
                file:text-sm file:font-semibold
                file:bg-teal-50 file:text-teal-700
                hover:file:bg-teal-100"
              disabled={isLoading}
              required
            />
          </div>

          <div className="flex justify-end space-x-2">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
              disabled={isLoading}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 text-sm font-medium text-white bg-teal-600 rounded-md hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2"
              disabled={isLoading}
            >
              {isLoading ? 'Uploading...' : 'Upload Report'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

const PatientDetailTabs: React.FC<PatientDetailsTabsProps> = ({ patient, onRefresh }) => {
  const [activeTab, setActiveTab] = useState<'details' | 'history' | 'reports'>('details');
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [reports, setReports] = useState<LabReportData[]>([]);
  const [reportFilter, setReportFilter] = useState<string>('');
  const [reportPagination, setReportPagination] = useState({
    total: 0,
    page: 1,
    limit: 5,
    totalPages: 0
  });
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  const fetchReports = useCallback(async () => {
    if (!patient?.patientId) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const filter: ReportFilter = {};
      if (reportFilter) {
        filter.reportType = reportFilter;
      }
      
      const response = await reportApi.getPatientReports(
        patient.patientId,
        filter,
        reportPagination.page,
        reportPagination.limit
      );
      
      if (response.success && response.data) {
        setReports(response.data);
        if (response.pagination) {
          setReportPagination(response.pagination);
        }
      }
    } catch (err) {
      console.error('Error fetching reports:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch reports');
    } finally {
      setIsLoading(false);
    }
  }, [patient?.patientId, reportFilter, reportPagination.page, reportPagination.limit]);

  // Fetch reports when tab changes to reports or after filter/pagination changes
  useEffect(() => {
    if (activeTab === 'reports') {
      fetchReports();
    }
  }, [activeTab, fetchReports]);

  const handleUploadReport = async (reportType: string, reportName: string, file: File) => {
    setIsLoading(true);
    setError(null);
    
    try {
      await reportApi.uploadLabReport(patient.patientId, reportType, reportName, file);
      // Refresh reports list
      await fetchReports();
      // Refresh patient data after successful upload
      if (onRefresh) {
        await onRefresh();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to upload report');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };
  
  const handlePageChange = (newPage: number) => {
    setReportPagination(prev => ({
      ...prev,
      page: newPage
    }));
  };
  
  const handleFilterChange = (type: string) => {
    setReportFilter(type);
    setReportPagination(prev => ({
      ...prev,
      page: 1 // Reset to first page when filter changes
    }));
    setIsFilterOpen(false);
  };

  const tabs = [
    { id: 'details' as const, label: 'Details', icon: ClipboardList },
    { id: 'history' as const, label: 'Medical History', icon: FileText },
    { id: 'reports' as const, label: 'Lab Reports', icon: BarChart2 },
  ];

  const handleTabChange = (tabId: 'details' | 'history' | 'reports') => {
    setActiveTab(tabId);
  };

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      {/* Tabs */}
      <div className="flex border-b">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`flex items-center px-6 py-4 text-sm font-medium transition-colors ${
              activeTab === tab.id
                ? 'border-b-2 border-teal-700 text-teal-700'
                : 'text-gray-500 hover:text-gray-700'
            }`}
            onClick={() => handleTabChange(tab.id)}
          >
            <tab.icon size={18} className="mr-2" />
            {tab.label}
          </button>
        ))}
      </div>

      {/* Tab content */}
      <div className="p-6">
        {activeTab === 'details' && (
          <div className="space-y-6">
            <h3 className="text-lg font-semibold text-gray-800">Patient Information</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <div className="mb-4">
                  <p className="text-sm text-gray-500 mb-1">Full Name</p>
                  <p className="font-medium">{patient.firstName} {patient.lastName}</p>
                </div>
                
                <div className="mb-4">
                  <p className="text-sm text-gray-500 mb-1">Age</p>
                  <p className="font-medium">{patient.age} years</p>
                </div>
                
                <div className="mb-4">
                  <p className="text-sm text-gray-500 mb-1">Email</p>
                  <p className="font-medium">{patient.email || 'NA'}</p>
                </div>
              </div>
              
              <div>
                <div className="mb-4">
                  <p className="text-sm text-gray-500 mb-1">Gender</p>
                  <p className="font-medium">{patient.gender}</p>
                </div>
                
                <div className="mb-4">
                  <p className="text-sm text-gray-500 mb-1">Contact</p>
                  <p className="font-medium">{patient.contactNumber || 'NA'}</p>
                </div>
                
                <div className="mb-4">
                  <p className="text-sm text-gray-500 mb-1">Address</p>
                  <p className="font-medium">{patient.address || 'NA'}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'history' && (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-lg font-semibold text-gray-800">Medical History</h3>
              <button className="btn btn-outline text-sm">Add Note</button>
            </div>
            
            {patient?.history?.length > 0 ? (
              <div className="space-y-6">
                {patient.history?.map((item, ind) => (
                  <div key={ind} className="relative pl-6 pb-6 border-l-2 border-gray-200">
                    {/* Timeline dot */}
                    <div className="absolute -left-[9px] top-0 h-4 w-4 rounded-full bg-teal-700"></div>
                    
                    <div className="mb-2">
                      <span className="text-sm font-medium text-gray-800">{item.field}</span>
                      <span className="mx-2 text-gray-300">•</span>
                      <span className="text-sm text-gray-500">{item.date}</span>
                    </div>
                    
                    <p className="text-gray-700 mb-2">{item.note}</p>
                    
                    <p className="text-xs text-gray-500">Added by: Dr. {item.addedBy?.name}</p>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                No medical history records found
              </div>
            )}
          </div>
        )}

        {activeTab === 'reports' && (
          <div>
            <div className="flex justify-between items-center mb-6">
              <div className="flex items-center">
                <h3 className="text-lg font-semibold text-gray-800 mr-3">Lab Reports</h3>
                <div className="relative">
                  <button 
                    className="px-2 py-1 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 flex items-center"
                    onClick={() => setIsFilterOpen(!isFilterOpen)}
                  >
                    <Filter size={14} className="mr-1" />
                    {reportFilter ? reportFilter : 'Filter'}
                  </button>
                  
                  {isFilterOpen && (
                    <div className="absolute top-full left-0 mt-1 bg-white shadow-lg rounded-md z-10 w-48 py-1">
                      <button 
                        className="w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                        onClick={() => handleFilterChange('')}
                      >
                        All Types
                      </button>
                      {COMMON_REPORT_TYPES.filter(t => t !== 'Other').map(type => (
                        <button 
                          key={type}
                          className="w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                          onClick={() => handleFilterChange(type)}
                        >
                          {type}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              </div>
              <button 
                className="px-4 py-2 text-sm font-medium text-white bg-teal-600 rounded-md hover:bg-teal-700 flex items-center"
                onClick={() => setIsUploadModalOpen(true)}
              >
                <Upload size={16} className="mr-2" />
                Upload Report
              </button>
            </div>
            
            {error && (
              <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md text-sm">
                {error}
              </div>
            )}
            
            {isLoading ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[...Array(4)].map((_, i) => (
                  <div key={i} className="border rounded-lg p-4 animate-pulse">
                    <div className="flex items-center justify-between mb-2">
                      <div className="h-5 bg-gray-200 rounded w-1/2"></div>
                      <div className="h-4 bg-gray-200 rounded w-1/4"></div>
                    </div>
                    <div className="h-4 bg-gray-200 rounded w-1/3 mb-3"></div>
                    <div className="flex space-x-2">
                      <div className="h-8 bg-gray-200 rounded w-16"></div>
                      <div className="h-8 bg-gray-200 rounded w-16"></div>
                    </div>
                  </div>
                ))}
              </div>
            ) : reports.length > 0 ? (
              <>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {reports.map((report) => (
                    <div key={report._id} className="border rounded-lg p-4 hover:bg-gray-50">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium text-gray-800">{report.name || 'Unnamed Report'}</h4>
                        <span className="text-xs px-2 py-1 bg-gray-100 rounded-full text-gray-600">
                          {report.reportType}
                        </span>
                      </div>
                      
                      <p className="text-sm text-gray-500 mb-1">Uploaded on {new Date(report.createdAt).toLocaleDateString()}</p>
                      {report.addedBy && (
                        <p className="text-xs text-gray-500 mb-3">By: {report.addedBy.name}</p>
                      )}
                      
                      <div className="flex space-x-2">
                        <a 
                          href={report.fileUrl} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="px-3 py-1 text-xs font-medium text-teal-700 bg-teal-50 rounded-md hover:bg-teal-100"
                        >
                          View
                        </a>
                        <a 
                          href={report.fileUrl} 
                          download
                          className="px-3 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
                        >
                          Download
                        </a>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* Pagination */}
                {reportPagination.totalPages > 1 && (
                  <div className="flex justify-center mt-6">
                    <div className="flex items-center space-x-2">
                      <button
                        className="p-2 rounded-md bg-gray-100 text-gray-700 disabled:opacity-50"
                        disabled={reportPagination.page === 1}
                        onClick={() => handlePageChange(reportPagination.page - 1)}
                      >
                        <ChevronLeft size={16} />
                      </button>
                      
                      <span className="text-sm text-gray-600">
                        Page {reportPagination.page} of {reportPagination.totalPages}
                      </span>
                      
                      <button
                        className="p-2 rounded-md bg-gray-100 text-gray-700 disabled:opacity-50"
                        disabled={reportPagination.page === reportPagination.totalPages}
                        onClick={() => handlePageChange(reportPagination.page + 1)}
                      >
                        <ChevronRight size={16} />
                      </button>
                    </div>
                  </div>
                )}
              </>
            ) : (
              <div className="text-center py-8 text-gray-500">
                {reportFilter ? `No ${reportFilter} reports found` : 'No lab reports uploaded yet'}
              </div>
            )}
          </div>
        )}
      </div>
      
      {/* Upload Report Modal */}
      <UploadReportModal
        isOpen={isUploadModalOpen}
        onClose={() => setIsUploadModalOpen(false)}
        onUpload={handleUploadReport}
        isLoading={isLoading}
      />
    </div>
  );
};

export default PatientDetailTabs;
